# Source this script for its changes to take place.
# This will configure 3 "pill" sections in your top row and
# a command section in the bottom row:
#
# +-- <user> : <path> : <branch>
# +->
#
# user, path, branch will be padded so that the background
# is in a gradient that darkens as we move further towards
# the edge of the padding 

################################################################
# Text processing 
################################################################
parse_git_info() {
  branch=$(git branch 2>/dev/null | sed -n '/\* /s///p')
  if [[ -z "$branch" ]]; then
    echo "none"
  else
    repo_path=$(git rev-parse --show-toplevel 2>/dev/null)
    repo_name=$(basename "$repo_path")
    echo "${branch}@${repo_name}"
  fi
}


shorten_path() {
    local path=$(pwd)
    local max_len=50
    [ "${#path}" -le "$max_len" ] && echo "$path" && return

    # if the math is longer than `max_len`, keep the last 2
    # dirs and hope for the best
    
    path="${path%/}"          # remove training slash if any
    local last_dir="${path##*/}"    # last dir
    local rest="${path%/*}"         # everything before last dir
    local second_last="${rest##*/}" # second last dir
    echo ".../$second_last/$last_dir"
}

################################################################
# Appearance
################################################################
# convert hex to ANSI escape for foreground
hex_fg() {
  local hex=${1#"#"}  # Remove leading #
  local r=$((16#${hex:0:2}))
  local g=$((16#${hex:2:2}))
  local b=$((16#${hex:4:2}))
  echo "\[\e[38;2;${r};${g};${b}m\]"
}

# convert hex to ANSI escape for background
hex_bg() {
  local hex=${1#"#"}
  local r=$((16#${hex:0:2}))
  local g=$((16#${hex:2:2}))
  local b=$((16#${hex:4:2}))
  echo "\[\e[48;2;${r};${g};${b}m\]"
}

BOLD="\[\e[1m\]"
RESET="\[\e[0m\]"

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# select your colors below. they will be printed as:
# |COL1|COL2|COL3|BG|COL3|COL2|COL1|
__USER_COL1="#09605D"
__USER_COL2="#0D918C"
__USER_COL3="#11C2BB"
__USER_BG="#16F5EA"
__USER_FG="#000000"

__DIR_COL1="#6C083B"
__DIR_COL2="#930B52"
__DIR_COL3="#C40E6C"
__DIR_BG="#F51187"
__DIR_FG="#000000"

__GIT_COL1="#1E565F"
__GIT_COL2="#2E8192"
__GIT_COL3="#3DABC4"
__GIT_BG="#4CDEF5"
__GIT_FG="#000000"
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PS1="\
$(hex_fg "$__USER_BG")╭─$RESET\
$(hex_fg "$__USER_COL1")▇$(hex_fg "$__USER_COL2")█$(hex_fg "$__USER_COL3")█\
${BOLD}$(hex_bg "$__USER_BG")$(hex_fg "$__USER_FG") \u $RESET\
$(hex_fg "$__USER_COL3")█$(hex_fg "$__USER_COL2")█$(hex_fg "$__USER_COL1")▇$RESET : \
$(hex_fg "$__DIR_COL1")▇$(hex_fg "$__DIR_COL2")█$(hex_fg "$__DIR_COL3")█\
${BOLD}$(hex_bg "$__DIR_BG")$(hex_fg "$__DIR_FG") \$(shorten_path) $RESET\
$(hex_fg "$__DIR_COL3")█$(hex_fg "$__DIR_COL2")█$(hex_fg "$__DIR_COL1")▇$RESET : \
$(hex_fg "$__GIT_COL1")▇$(hex_fg "$__GIT_COL2")█$(hex_fg "$__GIT_COL3")█\
${BOLD}$(hex_bg "$__GIT_BG")$(hex_fg "$__GIT_FG") \$(parse_git_info) $RESET\
$(hex_fg "$__GIT_COL3")█$(hex_fg "$__GIT_COL2")█$(hex_fg "$__GIT_COL1")▇$RESET\n\
$(hex_fg "$__USER_BG")╰❱ $RESET"
